import React, { useState } from 'react';
import { Car, User, Shield, Calculator, CheckCircle, ArrowRight, Phone, Mail, Calendar } from 'lucide-react';

interface FormData {
  personalInfo: {
    fullName: string;
    email: string;
    phone: string;
    dateOfBirth: string;
    licenseNumber: string;
    yearsOfExperience: number;
  };
  vehicleInfo: {
    make: string;
    model: string;
    year: number;
    registrationNumber: string;
    engineCapacity: string;
    vehicleValue: number;
    usage: string;
  };
  coverageInfo: {
    coverageType: string;
    excessAmount: number;
    additionalCoverage: string[];
  };
}

const MotorInsuranceApp: React.FC = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState<FormData>({
    personalInfo: {
      fullName: '',
      email: '',
      phone: '',
      dateOfBirth: '',
      licenseNumber: '',
      yearsOfExperience: 0
    },
    vehicleInfo: {
      make: '',
      model: '',
      year: new Date().getFullYear(),
      registrationNumber: '',
      engineCapacity: '',
      vehicleValue: 0,
      usage: ''
    },
    coverageInfo: {
      coverageType: '',
      excessAmount: 0,
      additionalCoverage: []
    }
  });
  const [quote, setQuote] = useState<number | null>(null);
  const [loading, setLoading] = useState(false);

  const steps = [
    { id: 1, title: 'Personal Info', icon: User },
    { id: 2, title: 'Vehicle Details', icon: Car },
    { id: 3, title: 'Coverage Options', icon: Shield },
    { id: 4, title: 'Quote Result', icon: Calculator }
  ];

  const calculateQuote = () => {
    setLoading(true);
    
    // Simulate API call
    setTimeout(() => {
      const { vehicleInfo, personalInfo, coverageInfo } = formData;
      
      // Basic quote calculation logic
      let baseRate = 500;
      
      // Vehicle factors
      const vehicleAge = new Date().getFullYear() - vehicleInfo.year;
      if (vehicleAge < 3) baseRate *= 1.2;
      if (vehicleAge > 10) baseRate *= 0.8;
      
      // Engine capacity factor
      const engineCC = parseInt(vehicleInfo.engineCapacity);
      if (engineCC > 2000) baseRate *= 1.3;
      if (engineCC < 1200) baseRate *= 0.9;
      
      // Driver experience factor
      if (personalInfo.yearsOfExperience < 3) baseRate *= 1.4;
      if (personalInfo.yearsOfExperience > 10) baseRate *= 0.7;
      
      // Coverage type factor
      if (coverageInfo.coverageType === 'comprehensive') baseRate *= 1.5;
      if (coverageInfo.coverageType === 'third-party') baseRate *= 0.6;
      
      // Usage factor
      if (vehicleInfo.usage === 'commercial') baseRate *= 1.8;
      if (vehicleInfo.usage === 'private') baseRate *= 1.0;
      
      // Additional coverage
      baseRate += coverageInfo.additionalCoverage.length * 50;
      
      // Vehicle value factor
      baseRate += (vehicleInfo.vehicleValue / 100000) * 200;
      
      setQuote(Math.round(baseRate));
      setLoading(false);
      setCurrentStep(4);
    }, 2000);
  };

  const handleInputChange = (section: keyof FormData, field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [section]: {
        ...prev[section],
        [field]: value
      }
    }));
  };

  const handleAdditionalCoverage = (coverage: string) => {
    setFormData(prev => ({
      ...prev,
      coverageInfo: {
        ...prev.coverageInfo,
        additionalCoverage: prev.coverageInfo.additionalCoverage.includes(coverage)
          ? prev.coverageInfo.additionalCoverage.filter(c => c !== coverage)
          : [...prev.coverageInfo.additionalCoverage, coverage]
      }
    }));
  };

  const nextStep = () => {
    if (currentStep < 4) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const renderPersonalInfo = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Full Name</label>
          <input
            type="text"
            value={formData.personalInfo.fullName}
            onChange={(e) => handleInputChange('personalInfo', 'fullName', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
            placeholder="Enter your full name"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Email</label>
          <input
            type="email"
            value={formData.personalInfo.email}
            onChange={(e) => handleInputChange('personalInfo', 'email', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
            placeholder="your.email@example.com"
          />
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Phone Number</label>
          <input
            type="tel"
            value={formData.personalInfo.phone}
            onChange={(e) => handleInputChange('personalInfo', 'phone', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
            placeholder="+260 xxx xxx xxx"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Date of Birth</label>
          <input
            type="date"
            value={formData.personalInfo.dateOfBirth}
            onChange={(e) => handleInputChange('personalInfo', 'dateOfBirth', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
          />
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">License Number</label>
          <input
            type="text"
            value={formData.personalInfo.licenseNumber}
            onChange={(e) => handleInputChange('personalInfo', 'licenseNumber', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
            placeholder="Enter your license number"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Years of Driving Experience</label>
          <input
            type="number"
            value={formData.personalInfo.yearsOfExperience}
            onChange={(e) => handleInputChange('personalInfo', 'yearsOfExperience', parseInt(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
            min="0"
            max="50"
          />
        </div>
      </div>
    </div>
  );

  const renderVehicleInfo = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Vehicle Make</label>
          <select
            value={formData.vehicleInfo.make}
            onChange={(e) => handleInputChange('vehicleInfo', 'make', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
          >
            <option value="">Select make</option>
            <option value="Toyota">Toyota</option>
            <option value="Honda">Honda</option>
            <option value="Nissan">Nissan</option>
            <option value="Mazda">Mazda</option>
            <option value="Ford">Ford</option>
            <option value="Mercedes-Benz">Mercedes-Benz</option>
            <option value="BMW">BMW</option>
            <option value="Audi">Audi</option>
          </select>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Model</label>
          <input
            type="text"
            value={formData.vehicleInfo.model}
            onChange={(e) => handleInputChange('vehicleInfo', 'model', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
            placeholder="e.g., Camry, Civic, X5"
          />
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Year</label>
          <input
            type="number"
            value={formData.vehicleInfo.year}
            onChange={(e) => handleInputChange('vehicleInfo', 'year', parseInt(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
            min="1990"
            max={new Date().getFullYear() + 1}
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Registration Number</label>
          <input
            type="text"
            value={formData.vehicleInfo.registrationNumber}
            onChange={(e) => handleInputChange('vehicleInfo', 'registrationNumber', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
            placeholder="e.g., ABC 123Z"
          />
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Engine Capacity (cc)</label>
          <select
            value={formData.vehicleInfo.engineCapacity}
            onChange={(e) => handleInputChange('vehicleInfo', 'engineCapacity', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
          >
            <option value="">Select capacity</option>
            <option value="1000">1000cc</option>
            <option value="1300">1300cc</option>
            <option value="1500">1500cc</option>
            <option value="1800">1800cc</option>
            <option value="2000">2000cc</option>
            <option value="2500">2500cc</option>
            <option value="3000">3000cc+</option>
          </select>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Vehicle Value (ZMW)</label>
          <input
            type="number"
            value={formData.vehicleInfo.vehicleValue}
            onChange={(e) => handleInputChange('vehicleInfo', 'vehicleValue', parseInt(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
            placeholder="Market value in ZMW"
          />
        </div>
      </div>
      
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Vehicle Usage</label>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <label className="flex items-center p-3 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50">
            <input
              type="radio"
              name="usage"
              value="private"
              checked={formData.vehicleInfo.usage === 'private'}
              onChange={(e) => handleInputChange('vehicleInfo', 'usage', e.target.value)}
              className="mr-3"
            />
            <span>Private Use</span>
          </label>
          <label className="flex items-center p-3 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50">
            <input
              type="radio"
              name="usage"
              value="commercial"
              checked={formData.vehicleInfo.usage === 'commercial'}
              onChange={(e) => handleInputChange('vehicleInfo', 'usage', e.target.value)}
              className="mr-3"
            />
            <span>Commercial Use</span>
          </label>
        </div>
      </div>
    </div>
  );

  const renderCoverageInfo = () => (
    <div className="space-y-6">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-4">Coverage Type</label>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {[
            { id: 'third-party', name: 'Third Party', desc: 'Basic legal requirement' },
            { id: 'third-party-fire-theft', name: 'Third Party, Fire & Theft', desc: 'Covers fire and theft damage' },
            { id: 'comprehensive', name: 'Comprehensive', desc: 'Full coverage protection' }
          ].map((option) => (
            <label key={option.id} className="flex flex-col p-4 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50">
              <input
                type="radio"
                name="coverageType"
                value={option.id}
                checked={formData.coverageInfo.coverageType === option.id}
                onChange={(e) => handleInputChange('coverageInfo', 'coverageType', e.target.value)}
                className="mb-2"
              />
              <span className="font-medium">{option.name}</span>
              <span className="text-sm text-gray-600">{option.desc}</span>
            </label>
          ))}
        </div>
      </div>
      
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Excess Amount (ZMW)</label>
        <select
          value={formData.coverageInfo.excessAmount}
          onChange={(e) => handleInputChange('coverageInfo', 'excessAmount', parseInt(e.target.value))}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
        >
          <option value={0}>No excess</option>
          <option value={1000}>ZMW 1,000</option>
          <option value={2500}>ZMW 2,500</option>
          <option value={5000}>ZMW 5,000</option>
          <option value={10000}>ZMW 10,000</option>
        </select>
      </div>
      
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-4">Additional Coverage (Optional)</label>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {[
            'Windscreen Cover',
            'Personal Accident',
            'Courtesy Car',
            'Roadside Assistance',
            'Legal Protection',
            'Key Replacement'
          ].map((coverage) => (
            <label key={coverage} className="flex items-center p-3 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50">
              <input
                type="checkbox"
                checked={formData.coverageInfo.additionalCoverage.includes(coverage)}
                onChange={() => handleAdditionalCoverage(coverage)}
                className="mr-3"
              />
              <span>{coverage}</span>
            </label>
          ))}
        </div>
      </div>
    </div>
  );

  const renderQuoteResult = () => (
    <div className="text-center space-y-6">
      <div className="bg-gradient-to-r from-green-500 to-green-600 text-white p-8 rounded-xl">
        <CheckCircle className="w-16 h-16 mx-auto mb-4" />
        <h2 className="text-3xl font-bold mb-2">Your Quote is Ready!</h2>
        <div className="text-5xl font-bold mb-2">ZMW {quote?.toLocaleString()}</div>
        <p className="text-green-100">Annual Premium</p>
      </div>
      
      <div className="bg-gray-50 p-6 rounded-lg">
        <h3 className="font-semibold mb-4">Quote Summary</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
          <div>
            <p><strong>Vehicle:</strong> {formData.vehicleInfo.make} {formData.vehicleInfo.model}</p>
            <p><strong>Coverage:</strong> {formData.coverageInfo.coverageType.replace('-', ' ').toUpperCase()}</p>
            <p><strong>Policy Holder:</strong> {formData.personalInfo.fullName}</p>
          </div>
          <div>
            <p><strong>Vehicle Value:</strong> ZMW {formData.vehicleInfo.vehicleValue.toLocaleString()}</p>
            <p><strong>Excess:</strong> ZMW {formData.coverageInfo.excessAmount.toLocaleString()}</p>
            <p><strong>Add-ons:</strong> {formData.coverageInfo.additionalCoverage.length} selected</p>
          </div>
        </div>
      </div>
      
      <div className="flex flex-col sm:flex-row gap-4 justify-center">
        <button className="bg-green-600 hover:bg-green-700 text-white px-8 py-3 rounded-lg font-semibold transition-colors">
          Purchase Policy
        </button>
        <button 
          onClick={() => setCurrentStep(1)}
          className="bg-gray-200 hover:bg-gray-300 text-gray-800 px-8 py-3 rounded-lg font-semibold transition-colors"
        >
          Get New Quote
        </button>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50">
      {/* Header */}
      <div className="bg-white shadow-sm">
        <div className="max-w-6xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-12 h-12 bg-green-600 rounded-full flex items-center justify-center">
                <Shield className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-800">Hobbiton Insurance</h1>
                <p className="text-gray-600">Motor Insurance Quotation</p>
              </div>
            </div>
            <div className="hidden md:flex items-center space-x-6 text-sm text-gray-600">
              <div className="flex items-center space-x-2">
                <Phone className="w-4 h-4" />
                <span>+260 xxx xxx xxx</span>
              </div>
              <div className="flex items-center space-x-2">
                <Mail className="w-4 h-4" />
                <span>info@hobbiton.co.zm</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Progress Steps */}
      <div className="max-w-4xl mx-auto px-4 py-8">
        <div className="flex justify-between items-center mb-8">
          {steps.map((step, index) => {
            const Icon = step.icon;
            const isActive = currentStep === step.id;
            const isCompleted = currentStep > step.id;
            
            return (
              <div key={step.id} className="flex items-center">
                <div className={`flex items-center justify-center w-12 h-12 rounded-full ${
                  isActive 
                    ? 'bg-green-600 text-white' 
                    : isCompleted 
                    ? 'bg-green-100 text-green-600' 
                    : 'bg-gray-200 text-gray-400'
                }`}>
                  <Icon className="w-6 h-6" />
                </div>
                <div className="ml-3 hidden md:block">
                  <p className={`text-sm font-medium ${
                    isActive ? 'text-green-600' : isCompleted ? 'text-green-600' : 'text-gray-400'
                  }`}>
                    {step.title}
                  </p>
                </div>
                {index < steps.length - 1 && (
                  <div className={`w-16 h-0.5 ml-4 ${
                    isCompleted ? 'bg-green-600' : 'bg-gray-200'
                  }`} />
                )}
              </div>
            );
          })}
        </div>

        {/* Form Content */}
        <div className="bg-white rounded-xl shadow-lg p-8">
          {currentStep === 1 && renderPersonalInfo()}
          {currentStep === 2 && renderVehicleInfo()}
          {currentStep === 3 && renderCoverageInfo()}
          {currentStep === 4 && renderQuoteResult()}
          
          {/* Navigation Buttons */}
          {currentStep < 4 && (
            <div className="flex justify-between mt-8">
              <button
                onClick={prevStep}
                disabled={currentStep === 1}
                className={`px-6 py-3 rounded-lg font-medium transition-colors ${
                  currentStep === 1
                    ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
              >
                Previous
              </button>
              
              {currentStep === 3 ? (
                <button
                  onClick={calculateQuote}
                  disabled={loading}
                  className="bg-green-600 hover:bg-green-700 text-white px-8 py-3 rounded-lg font-medium transition-colors flex items-center space-x-2"
                >
                  {loading ? (
                    <>
                      <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
                      <span>Calculating...</span>
                    </>
                  ) : (
                    <>
                      <Calculator className="w-5 h-5" />
                      <span>Get Quote</span>
                    </>
                  )}
                </button>
              ) : (
                <button
                  onClick={nextStep}
                  className="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-medium transition-colors flex items-center space-x-2"
                >
                  <span>Next</span>
                  <ArrowRight className="w-5 h-5" />
                </button>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Footer */}
      <div className="bg-gray-800 text-white py-8 mt-12">
        <div className="max-w-4xl mx-auto px-4 text-center">
          <p className="text-gray-400">
            © 2025 Hobbiton Technologies Limited. All rights reserved.
          </p>
          <p className="text-sm text-gray-500 mt-2">
            Zambian-owned fintech company specializing in digital insurance solutions
          </p>
        </div>
      </div>
    </div>
  );
};

export default MotorInsuranceApp;